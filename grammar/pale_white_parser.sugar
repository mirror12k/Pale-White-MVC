package PaleWhite::MVC::Parser

native_code_block_regex = /\{\{.*?\}\}/s

symbol_regex = /\{|\}|\[|\]|\(|\)|;|:|=>|<|>|<=|>=|==|!=|=|,|\.|\?|!|\@|\//
# symbol_regex = /\{|\}|\[|\]|\(|\)|;/
model_identifier_regex = /model::[a-zA-Z_][a-zA-Z0-9_]*+(?:::[a-zA-Z_][a-zA-Z0-9_]*+)*/
controller_identifier_regex = /controller::[a-zA-Z_][a-zA-Z0-9_]*+(?:::[a-zA-Z_][a-zA-Z0-9_]*+)*/
file_identifier_regex = /file::[a-zA-Z_][a-zA-Z0-9_]*+(?:::[a-zA-Z_][a-zA-Z0-9_]*+)*/
native_identifier_regex = /native::[a-zA-Z_][a-zA-Z0-9_]*+(?:::[a-zA-Z_][a-zA-Z0-9_]*+)*/
# keyword_regex = /\b(model|int|string|getter|setter|cast|to|from|static|function)\b/
class_identifier_regex = /[a-zA-Z_][a-zA-Z0-9_]*+(?:::[a-zA-Z_][a-zA-Z0-9_]*+)*/
identifier_regex = /[a-zA-Z_][a-zA-Z0-9_]*+/

integer_regex = /-?\d++/
string_regex = /"([^\\"]|\\[\\"])*?"/s
string_interpolation_start_regex = /"([^\\"]|\\[\\"])*?\{\{/s
string_interpolation_middle_regex = /\}\}([^\\"]|\\[\\"])*?\{\{/s
string_interpolation_end_regex = /\}\}([^\\"]|\\[\\"])*?"/s

comment_regex = /#[^\n]*+\n/s
whitespace_regex = /\s++/s


event_identifier_regex = /create|delete/


format_native_code_substitution = s/\A\{\{\s*\n(.*?)\s*\}\}\Z/$1/s
format_model_identifier_substitution = s/\Amodel:://s
format_controller_identifier_substitution = s/\Acontroller:://s
format_file_identifier_substitution = s/\Afile:://s
format_native_identifier_substitution = s/\Anative:://s
escape_string_substitution = s/\\([\\"])/$1/gs
format_string_substitution = s/\A"(.*)"\Z/$1/s
format_string_interpolation_start_substitution = s/\A"(.*)\{\{\Z/$1/s
format_string_interpolation_middle_substitution = s/\A\}\}(.*)\{\{\Z/$1/s
format_string_interpolation_end_substitution = s/\A\}\}(.*)"\Z/$1/s
format_event_identifier_substitution = s/\A/on_/s



tokens {
	native_code_block => $native_code_block_regex

	model_identifier => $model_identifier_regex
	controller_identifier => $controller_identifier_regex
	file_identifier => $file_identifier_regex
	native_identifier => $native_identifier_regex
	# keyword => $keyword_regex
	class_identifier => $class_identifier_regex
	identifier => $identifier_regex
	
	integer => $integer_regex
	string_interpolation_start => $string_interpolation_start_regex
	string_interpolation_middle => $string_interpolation_middle_regex
	string_interpolation_end => $string_interpolation_end_regex
	string => $string_regex

	symbol => $symbol_regex

	comment => $comment_regex
	whitespace => $whitespace_regex
}

ignored_tokens {
	whitespace
	comment
}




list context root {
	switch {
		'model' => {
			match $identifier_regex, '{'
			push !model_block->{
				type => 'model_definition'
				identifier => $1
				functions => []
				properties => []
				virtual_properties => []
			}
			match '}'
		}
		'controller' => {
			match $identifier_regex, '{'
			push !controller_block->{
				type => 'controller_definition'
				line_number => $0{line_number}
				identifier => $1
			}
			match '}'
		}
		'view_controller' => {
			match $identifier_regex, '{'
			push !view_controller_block->{
				type => 'view_controller_definition'
				line_number => $0{line_number}
				identifier => $1
			}
			match '}'
		}
		'plugin' => {
			match $identifier_regex, '{'
			push !plugin_block->{
				type => 'plugin_definition'
				line_number => $0{line_number}
				identifier => $1
			}
			match '}'
		}
		'file_directory' => {
			match $identifier_regex, $string_regex, '{'
			push !file_directory_block->{
				type => 'file_directory_definition'
				line_number => $0{line_number}
				identifier => $1
				directory => !format_string->$2
				properties => {}
			}
			match '}'
		}
		'native_library' => {
			match $class_identifier_regex, '=>', $string_regex, ';'
			push {
				type => 'native_library_declaration'
				line_number => $0{line_number}
				identifier => $1
				include_file => !format_string->$3
			}
		}
		default {
			die 'block statement expected'
		}
	}
}

object context model_block {
	switch {
		'get', ':' => {
			match $identifier_regex
			$_{virtual_properties}[] = !path_action_block->{
				type => 'virtual_property'
				line_number => $0{line_number}
				identifier => $2
				block => []
			}
		}
		'function' => {
			match $identifier_regex
			$_{functions}[] = !path_action_block->{
				type => 'model_function'
				line_number => $0{line_number}
				identifier => $1
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'static', 'function' => {
			match $identifier_regex
			$_{functions}[] = !path_action_block->{
				type => 'model_static_function'
				line_number => $0{line_number}
				identifier => $2
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'on', $event_identifier_regex => {
			$_{functions}[] = !path_action_block->{
				type => 'on_event_function'
				line_number => $0{line_number}
				identifier => $format_event_identifier_substitution->$1
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		$model_identifier_regex => {
			$_{properties}[] = !model_property_identifier->{
				type => 'model_pointer_property'
				line_number => $0{line_number}
				property_type => $format_model_identifier_substitution->$0
				modifiers => {
					default => '0'
				}
				modifiers => !model_property_type_modifiers->{}
			}
			match ';'
		}
		$file_identifier_regex => {
			$_{properties}[] = !model_property_identifier->{
				type => 'file_pointer_property'
				line_number => $0{line_number}
				property_type => $format_file_identifier_substitution->$0
				modifiers => {
					default => '""'
				}
				modifiers => !model_property_type_modifiers->{}
			}
			match ';'
		}
		$identifier_regex => {
			$_{properties}[] = !model_property_identifier->{
				type => 'model_property'
				line_number => $0{line_number}
				property_type => $0
				modifiers => !model_property_type_modifiers->{}
			}
			match ';'
		}
		default {
			return
		}
	}
}

object context model_property_type_modifiers {
	switch {
		'[', $integer_regex, ']' => {
			$_{property_size} = $1
		}
		'[', ']' => {
			$_{array_property} = 'enabled'
		}
		'{', 'int', '}' => {
			$_{map_property} = {
				type => 'model_key_property'
				line_number => $0{line_number}
				property_type => 'int'
				identifier => 'map_key'
				modifiers => {
					# unique => 'enabled'
				}
			}
		}
		'{', 'string', '[', $integer_regex, ']', '}' => {
			$_{map_property} = {
				type => 'model_key_property'
				line_number => $0{line_number}
				property_type => 'string'
				identifier => 'map_key'
				modifiers => {
					# unique => 'enabled'
					property_size => $3
				}
			}
		}
		default {
			return
		}
	}
}

object context model_property_identifier {
	match $identifier_regex
	$_{identifier} = $0
	$_{modifiers} = !model_property_identifier_modifiers->$_{modifiers}
	return
}

object context model_property_identifier_modifiers {
	switch {
		'unique_key' => {
			$_{$0} = 'enabled'
		}
		'unique' => {
			$_{$0} = 'enabled'
		}
		'auto_increment' => {
			$_{$0} = 'enabled'
		}
		default {
			return
		}
	}
}

object context controller_block {
	switch {
		'path', 'global' => {
			$_{global_paths}[] = !path_action_block->{
				type => 'global_path'
				line_number => $0{line_number}
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'path', 'default' => {
			$_{default_path} = !path_action_block->{
				type => 'default_path'
				line_number => $0{line_number}
				arguments => []
				block => []
			}
		}
		'path', 'error' => {
			$_{error_path} = !path_action_block->{
				type => 'error_path'
				line_number => $0{line_number}
				arguments => []
				block => []
			}
		}
		'path', $string_regex => {
			$_{paths}[] = !path_action_block->{
				type => 'match_path'
				line_number => $0{line_number}
				path => !format_string->$1
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'path' => {
			$_{paths}[] = !path_action_block->{
				type => 'match_path'
				line_number => $0{line_number}
				path => !interpolated_string_path->[]
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'ajax', 'global' => {
			$_{global_ajax_paths}[] = !path_action_block->{
				type => 'global_path'
				line_number => $0{line_number}
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'ajax', 'default' => {
			$_{default_ajax_path} = !path_action_block->{
				type => 'default_path'
				line_number => $0{line_number}
				arguments => []
				block => []
			}
		}
		'ajax', 'error' => {
			$_{error_ajax_path} = !path_action_block->{
				type => 'error_path'
				line_number => $0{line_number}
				arguments => []
				block => []
			}
		}
		'ajax', $string_regex => {
			$_{ajax_paths}[] = !path_action_block->{
				type => 'match_path'
				line_number => $0{line_number}
				path => !format_string->$1
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'ajax' => {
			$_{ajax_paths}[] = !path_action_block->{
				type => 'match_path'
				line_number => $0{line_number}
				path => !interpolated_string_path->[]
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'api', 'global' => {
			$_{global_api_paths}[] = !path_action_block->{
				type => 'global_path'
				line_number => $0{line_number}
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'api', 'default' => {
			$_{default_api_path} = !path_action_block->{
				type => 'default_path'
				line_number => $0{line_number}
				arguments => []
				block => []
			}
		}
		'api', 'error' => {
			$_{error_api_path} = !path_action_block->{
				type => 'error_path'
				line_number => $0{line_number}
				arguments => []
				block => []
			}
		}
		'api', $string_regex => {
			$_{api_paths}[] = !path_action_block->{
				type => 'match_path'
				line_number => $0{line_number}
				path => !format_string->$1
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'api' => {
			$_{api_paths}[] = !path_action_block->{
				type => 'match_path'
				line_number => $0{line_number}
				path => !interpolated_string_path->[]
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'event' => {
			match $identifier_regex
			$_{controller_events}[] = !path_action_block->{
				type => 'event_block'
				line_number => $0{line_number}
				identifier => $1
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'action' => {
			match $identifier_regex

			$_{actions}[] = !path_action_block->{
				type => 'action_block'
				line_number => $0{line_number}
				identifier => $1
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'validator' => {
			match $identifier_regex

			$_{validators}[] = {
				type => 'validator'
				line_number => $0{line_number}
				identifier => $1
				code => !native_code_block->$2
			}
		}
		default {
			return
		}
	}
}



object context view_controller_block {
	switch {
		'args' => {
			$_{args_block} = !path_action_block->{
				type => 'args_block'
				line_number => $0{line_number}
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'action' => {
			match $identifier_regex

			$_{actions}[] = !path_action_block->{
				type => 'action_block'
				line_number => $0{line_number}
				identifier => $1
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		default {
			return
		}
	}
}



object context plugin_block {
	switch {
		'hook', 'event' => {
			match $class_identifier_regex, ':', $identifier_regex
			$_{event_hooks}[] = !path_action_block->{
				type => 'event_hook'
				line_number => $0{line_number}
				controller_class => $2
				identifier => $4
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'hook', 'action' => {
			match $class_identifier_regex, ':', $identifier_regex
			$_{action_hooks}[] = !path_action_block->{
				type => 'action_hook'
				line_number => $0{line_number}
				controller_class => $2
				identifier => $4
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'hook', 'controller', 'route' => {
			match $class_identifier_regex
			$_{controller_route_hooks}[] = !path_action_block->{
				type => 'controller_route_hook'
				line_number => $0{line_number}
				controller_class => $3
				block => []
			}
		}
		'hook', 'controller', 'ajax' => {
			match $class_identifier_regex
			$_{controller_ajax_hooks}[] = !path_action_block->{
				type => 'controller_ajax_hook'
				line_number => $0{line_number}
				controller_class => $3
				block => []
			}
		}
		'hook', 'controller', 'api' => {
			match $class_identifier_regex
			$_{controller_api_hooks}[] = !path_action_block->{
				type => 'controller_api_hook'
				line_number => $0{line_number}
				controller_class => $3
				block => []
			}
		}
		'action' => {
			match $identifier_regex

			$_{actions}[] = !path_action_block->{
				type => 'action_block'
				line_number => $0{line_number}
				identifier => $1
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		default {
			return
		}
	}
}




item context native_code_block {
	match $native_code_block_regex
	$_ = !format_native_code->$0
	return
}


list context interpolated_string_path {
	match $string_interpolation_start_regex
	push {
		type => 'string_token'
		value => !format_string_interpolation_start->$0
	}
	push !interpolated_string_path_expression

	while $string_interpolation_middle_regex => {
		push {
			type => 'string_token'
			value => !format_string_interpolation_middle->$1
		}
		push !interpolated_string_path_expression
	}

	match $string_interpolation_end_regex
	push {
		type => 'string_token'
		value => !format_string_interpolation_end->$1
	}

	return
}

object context interpolated_string_path_expression {
	switch {
		$identifier_regex, '=', '[', ']' => {
			$_ = {
				type => 'match_list_identifier'
				regex => '.+'
				seperator => '/'
				identifier => $0
			}
		}
		$identifier_regex, '=', '.', '.', '.' => {
			$_ = {
				type => 'match_identifier'
				regex => '.*'
				identifier => $0
			}
		}
		$identifier_regex => {
			$_ = {
				type => 'match_identifier'
				regex => '[^/]+'
				identifier => $0
			}
		}
		'.', '.', '.' => {
			$_ = {
				type => 'match_any'
				regex => '.*'
			}
		}
		default {
			die 'expected path expression'
		}
	}

	return
}

list context optional_arguments_list {
	if '[' => {
		$_ = !arguments_list->$_
	}
	return
}

list context arguments_list {
	if ']' => {
		return
	} else {
		$_ = !arguments_list_item->$_
		while ',' => {
			$_ = !arguments_list_item->$_
		}
		match ']'
		return
	}
}

list context arguments_list_item {
	if $identifier_regex => {
		if '[', $integer_regex, ']', $identifier_regex => {
			push {
				type => 'argument_specifier'
				line_number => $0{line_number}
				identifier => $4
			}
			push {
				type => 'validate_variable'
				line_number => $0{line_number}
				validator_identifier => $0
				validator_min_size => $2
				validator_max_size => $2
				identifier => $4
			}
			
		} elsif '[', $integer_regex, ':', ']', $identifier_regex => {
			push {
				type => 'argument_specifier'
				line_number => $0{line_number}
				identifier => $5
			}
			push {
				type => 'validate_variable'
				line_number => $0{line_number}
				validator_identifier => $0
				validator_min_size => $2
				identifier => $5
			}
			
		} elsif '[', ':', $integer_regex, ']', $identifier_regex => {
			push {
				type => 'argument_specifier'
				line_number => $0{line_number}
				identifier => $5
			}
			push {
				type => 'validate_variable'
				line_number => $0{line_number}
				validator_identifier => $0
				validator_max_size => $3
				identifier => $5
			}
			
		} elsif '[', $integer_regex, ':', $integer_regex, ']', $identifier_regex => {
			push {
				type => 'argument_specifier'
				line_number => $0{line_number}
				identifier => $6
			}
			push {
				type => 'validate_variable'
				line_number => $0{line_number}
				validator_identifier => $0
				validator_min_size => $2
				validator_max_size => $4
				identifier => $6
			}
			
		} elsif '?', $identifier_regex => {
			push {
				type => 'optional_argument_specifier'
				line_number => $0{line_number}
				identifier => $2
			}
			push {
				type => 'optional_validate_variable'
				line_number => $0{line_number}
				validator_identifier => $0
				identifier => $2
			}
			
		} elsif $identifier_regex => {
			push {
				type => 'argument_specifier'
				line_number => $0{line_number}
				identifier => $1
			}
			push {
				type => 'validate_variable'
				line_number => $0{line_number}
				validator_identifier => $0
				identifier => $1
			}
			
		} else {
			push {
				type => 'argument_specifier'
				line_number => $0{line_number}
				identifier => $0
			}
		}
	} elsif $model_identifier_regex, $identifier_regex => {
		push {
			type => 'argument_specifier'
			line_number => $0{line_number}
			identifier => $1
		}
		push {
			type => 'validate_variable'
			line_number => $0{line_number}
			validator_identifier => $0
			identifier => $1
		}
	} elsif '!', $identifier_regex => {
		push {
			type => 'argument_specifier'
			line_number => $0{line_number}
			identifier => $1
		}
		push {
			type => 'validate_variable'
			line_number => $0{line_number}
			validator_identifier => $1
			identifier => $1
		}

	} else {
		die 'expected argument list'
	}


	return
}

object context path_action_block {
	match '{'
	$_ = !path_action_block_list->$_
	return
}

object context path_action_block_list {
	switch {
		'log' => {
			$_{block}[] = {
				type => 'log_message'
				line_number => $0{line_number}
				expression => !action_expression
			}
			match ';'
		}
		'log_exception' => {
			$_{block}[] = {
				type => 'log_exception'
				line_number => $0{line_number}
				expression => !action_expression
			}
			match ';'
		}
		'render' => {
			match $class_identifier_regex
			$_{block}[] = {
				type => 'render_template'
				line_number => $0{line_number}
				identifier => $1
				arguments => !action_arguments->{}
			}
			match ';'
		}
		'render_file' => {
			$_{block}[] = {
				type => 'render_file'
				line_number => $0{line_number}
				expression => !action_expression
			}
			match ';'
		}
		'render_json' => {
			$_{block}[] = {
				type => 'render_json'
				line_number => $0{line_number}
				arguments => !action_arguments->{}
			}
			match ';'
		}
		'set_localization' => {
			$_{block}[] = {
				type => 'set_localization'
				line_number => $0{line_number}
				expression => !action_expression
			}
			match ';'
		}
		'status' => {
			$_{block}[] = {
				type => 'assign_status'
				line_number => $0{line_number}
				expression => !action_expression
			}
			match ';'
		}
		'redirect' => {
			$_{block}[] = {
				type => 'assign_redirect'
				line_number => $0{line_number}
				expression => !action_expression
			}
			match ';'
		}
		'header' => {
			match $string_regex, '='
			$_{block}[] = {
				type => 'assign_header'
				line_number => $0{line_number}
				header_string => !format_string->$1
				expression => !action_expression
			}
			match ';'
		}
		'schedule_event' => {
			match $identifier_regex, '.', $identifier_regex
			$_{block}[] = {
				type => 'schedule_event'
				line_number => $0{line_number}
				controller_identifier => $1
				event_identifier => $3
				arguments => !action_arguments->{}
			}
			match ';'
		}
		# 'shell_execute' => {
		# 	$_{block}[] = {
		# 		type => 'shell_execute'
		# 		line_number => $0{line_number}
		# 		arguments_list => !action_expression_list->[]
		# 	}
		# 	match ';'
		# }
		# 'action' => {
		# 	match $identifier_regex
		# 	$_{block}[] = {
		# 		type => 'controller_action'
		# 		line_number => $0{line_number}
		# 		identifier => $1
		# 		arguments => !action_arguments->{}
		# 	}
		# 	match ';'
		# }
		'route' => {
			match $class_identifier_regex
			$_{block}[] = {
				type => 'route_controller'
				line_number => $0{line_number}
				identifier => $1
				arguments => !action_arguments->{}
			}
			match ';'
		}
		'return', ';' => {
			$_{block}[] = {
				type => 'return_statement'
				line_number => $0{line_number}
			}
		}
		'return' => {
			$_{block}[] = {
				type => 'return_value_statement'
				line_number => $0{line_number}
				expression => !action_expression
			}
			match ';'
		}
		'validate' => {
			match $identifier_regex, 'as'
			if $model_identifier_regex => {
				$_{block}[] = {
					type => 'validate_variable'
					line_number => $0{line_number}
					identifier => $1
					validator_identifier => $3
				}
			} else {
				match $identifier_regex

				if '[', $integer_regex, ']' => {
					$_{block}[] = {
						type => 'validate_variable'
						line_number => $0{line_number}
						identifier => $1
						validator_identifier => $3
						validator_min_size => $5
						validator_max_size => $5
					}
				} elsif '[', $integer_regex, ':', ']' => {
					$_{block}[] = {
						type => 'validate_variable'
						line_number => $0{line_number}
						identifier => $1
						validator_identifier => $3
						validator_min_size => $5
					}
				} elsif '[', ':', $integer_regex, ']' => {
					$_{block}[] = {
						type => 'validate_variable'
						line_number => $0{line_number}
						identifier => $1
						validator_identifier => $3
						validator_max_size => $6
					}
				} elsif '[', $integer_regex, ':', $integer_regex, ']' => {
					$_{block}[] = {
						type => 'validate_variable'
						line_number => $0{line_number}
						identifier => $1
						validator_identifier => $3
						validator_min_size => $5
						validator_max_size => $7
					}
				} else {
					$_{block}[] = {
						type => 'validate_variable'
						line_number => $0{line_number}
						identifier => $1
						validator_identifier => $3
					}
				}
			}
			match ';'
		}
		'if' => {
			$_{block}[] = !path_action_block->{
				type => 'if_statement'
				line_number => $0{line_number}
				expression => !branch_action_expression
				block => []
			}
			if 'else' => {
				$_{block}[] = !path_action_block->{
					type => 'else_statement'
					line_number => $0{line_number}
					block => []
				}
			}
		}
		'session', '.', $identifier_regex, '=' => {
			$_{block}[] = {
				type => 'assign_session_variable'
				line_number => $0{line_number}
				identifier => $2
				expression => !action_expression
			}
			match ';'
		}
		$identifier_regex, '=' => {
			$_{block}[] = {
				type => 'assign_variable'
				line_number => $0{line_number}
				identifier => $0
				expression => !action_expression
			}
			match ';'
		}
		$identifier_regex, '.', $identifier_regex, '=' => {
			$_{block}[] = {
				type => 'assign_member_variable'
				line_number => $0{line_number}
				variable_identifier => $0
				identifier => $2
				expression => !action_expression
			}
			match ';'
		}
		'}' => {
			return
		}
		default {
			$_{block}[] = {
				type => 'expression_statement'
				expression => !action_expression
			}
			match ';'
		}
	}
}


object context action_arguments {
	switch {
		$identifier_regex, '=' => {
			$_{$0} = !action_expression
			if ',' => {
				# allow another argument to get parsed
			} else {
				return
			}
		}
		# $string_regex, '=' => {
		# 	$_{!format_string->$0} = !action_expression
		# 	if ',' => {
		# 		# allow another argument to get parsed
		# 	} else {
		# 		return
		# 	}
		# }
		default {
			return
		}
	}
}


object context object_constructor_expression {
	switch {
		$identifier_regex, '=' => {
			$_{values}[] = {
				type => 'identifier_object_key'
				identifier => $0
				expression => !action_expression
			}
		}
		$string_regex, '=' => {
			$_{values}[] = {
				type => 'string_object_key'
				value => !format_string->$0
				expression => !action_expression
			}
		}
		'{' => {
			$_{values}[] = !object_constructor_dynamic_expression->{
				type => 'expression_object_key'
				key_expression => !action_expression
			}
		}
		default {
			return
		}
	}
	if ',' => {
		# allow another argument to get parsed
	} else {
		return
	}
}

object context object_constructor_dynamic_expression {
	match '}', '='
	$_{value_expresssion} = !action_expression
	return
}



list context action_expression_list {
	push !action_expression
	while ',' => {
		push !action_expression
	}
	return
}

list context action_array_expression_list {
	switch {
		']' => {
			return
		}
		default {
			push !action_expression
			if ',' => {
				# allow another argument to get parsed
			} else {
				return
			}
		}
	}
}


item context branch_action_expression {
	match '('
	$_ = !action_expression
	match ')'
	return
}



object context action_expression {
	switch {
		'model', '?', $class_identifier_regex => {
			$_ = {
				type => 'load_optional_model_expression'
				line_number => $0{line_number}
				identifier => $2
				arguments => !action_arguments->{}
			}
			return
		}
		'model', $class_identifier_regex => {
			$_ = {
				type => 'load_model_expression'
				line_number => $0{line_number}
				identifier => $1
				arguments => !action_arguments->{}
			}
			return
		}
		'file', $class_identifier_regex => {
			$_ = {
				type => 'load_file_expression'
				line_number => $0{line_number}
				identifier => $1
				arguments => !action_arguments->{}
			}
			return
		}
		'list', $class_identifier_regex => {
			$_ = {
				type => 'load_model_list_expression'
				line_number => $0{line_number}
				identifier => $1
				arguments => !action_arguments->{}
			}
			return
		}
		'create', '?', $class_identifier_regex => {
			$_ = {
				type => 'create_optional_model_expression'
				line_number => $0{line_number}
				identifier => $2
				arguments => !action_arguments->{}
			}
			return
		}
		'create', $class_identifier_regex => {
			$_ = {
				type => 'create_model_expression'
				line_number => $0{line_number}
				identifier => $1
				arguments => !action_arguments->{}
			}
			return
		}
		'render', $class_identifier_regex => {
			$_ = {
				type => 'render_template_expression'
				line_number => $0{line_number}
				identifier => $1
				arguments => !action_arguments->{}
			}
			return
		}
		'render_file' => {
			$_ = {
				type => 'render_file_expression'
				line_number => $0{line_number}
				expression => !action_expression
			}
			return
		}
		'render_json' => {
			$_{block}[] = {
				type => 'render_json_expression'
				line_number => $0{line_number}
				arguments => !action_arguments->{}
			}
			return
		}
		'shell_execute' => {
			$_ = {
				type => 'shell_execute_expression'
				line_number => $0{line_number}
				arguments_list => !action_expression_list->[]
			}
			return
		}
		'action', 'plugins', '.', $identifier_regex, ':', $identifier_regex => {
			$_ = {
				type => 'plugin_action_expression'
				line_number => $0{line_number}
				plugin_identifier => $3
				action_identifier => $5
				arguments => !action_arguments->{}
			}
			return
		}
		'action', $controller_identifier_regex, '.', $identifier_regex => {
			$_ = {
				type => 'controller_action_expression'
				line_number => $0{line_number}
				controller_identifier => $format_controller_identifier_substitution->$1
				action_identifier => $3
				arguments => !action_arguments->{}
			}
			return
		}
		'action', $identifier_regex => {
			$_ = {
				type => 'local_controller_action_expression'
				line_number => $0{line_number}
				action_identifier => $1
				arguments => !action_arguments->{}
			}
			return
		}
		'session', '.', $identifier_regex => {
			$_ = !more_action_expression->{
				type => 'session_variable_expression'
				line_number => $0{line_number}
				identifier => $2
			}
			return
		}
		'len', '(' => {
			$_ = {
				type => 'length_expression'
				line_number => $0{line_number}
				expression => !action_expression
			}
			match ')'
			$_ = !more_action_expression->$_
			return
		}
		$model_identifier_regex => {
			$_ = !more_action_expression->{
				type => 'model_class_expression'
				line_number => $0{line_number}
				identifier => $format_model_identifier_substitution->$0
			}
			return
		}
		$native_identifier_regex => {
			$_ = !more_action_expression->{
				type => 'native_library_expression'
				line_number => $0{line_number}
				identifier => $format_native_identifier_substitution->$0
			}
			return
		}
		$identifier_regex => {
			$_ = !more_action_expression->{
				type => 'variable_expression'
				line_number => $0{line_number}
				identifier => $0
			}
			return
		}
		$string_interpolation_start_regex => {
			$_ = !string_interpolation_expression_list->{
				type => 'string_interpolation_expression'
				line_number => $0{line_number}
				start_text => $0
				expression_list => []
			}
			return
		}
		$string_regex => {
			$_ = {
				type => 'string_expression'
				line_number => $0{line_number}
				value => !format_string->$0
			}
			return
		}
		'@', $identifier_regex, '/', $identifier_regex => {
			$_ = {
				type => 'localized_string_expression'
				line_number => $0{line_number}
				identifier => $3
				namespace_identifier => $1
			}
			return
		}
		$integer_regex => {
			$_ = {
				type => 'integer_expression'
				line_number => $0{line_number}
				value => $0
			}
			return
		}
		'!' => {
			$_ = {
				type => 'not_expression'
				line_number => $0{line_number}
				expression => !action_expression
			}
			return
		}
		'{' => {
			$_ = !object_constructor_expression->{
				type => 'object_expression'
				line_number => $0{line_number}
			}
			match '}'
			return
		}
		'[' => {
			$_ = {
				type => 'array_expression'
				line_number => $0{line_number}
				value => !action_array_expression_list->[]
			}
			return
		}
		default {
			die 'expression expected'
		}
	}
}

object context string_interpolation_expression_list {
	$_{expression_list}[] = {
		type => 'string_expression'
		value => !format_string_interpolation_start->$_{start_text}
	}

	$_{expression_list}[] = !action_expression

	while $string_interpolation_middle_regex => {
		$_{expression_list}[] = {
			type => 'string_expression'
			value => !format_string_interpolation_middle->$0
		}
		$_{expression_list}[] = !action_expression
	}

	match $string_interpolation_end_regex
	$_{expression_list}[] = {
		type => 'string_expression'
		value => !format_string_interpolation_end->$0
	}

	return
}

item context format_string_interpolation_start {
	$_ = $escape_string_substitution->
			$format_string_interpolation_start_substitution->$_
	return
}

item context format_string_interpolation_middle {
	$_ = $escape_string_substitution->
			$format_string_interpolation_middle_substitution->$_
	return
}

item context format_string_interpolation_end {
	$_ = $escape_string_substitution->
			$format_string_interpolation_end_substitution->$_
	return
}


object context more_action_expression {
	switch {
		'.', $identifier_regex, '(', ')' => {
			$_ = {
				type => 'method_call_expression'
				line_number => $0{line_number}
				identifier => $1
				expression => $_
				arguments_list => []
			}
		}
		'.', $identifier_regex, '(' => {
			$_ = {
				type => 'method_call_expression'
				line_number => $0{line_number}
				identifier => $1
				expression => $_
				arguments_list => !action_expression_list->[]
			}
			match ')'
		}
		'.', $identifier_regex => {
			$_ = {
				type => 'access_expression'
				line_number => $0{line_number}
				identifier => $1
				expression => $_
			}
		}
		'<' => {
			$_ = {
				type => 'less_than_expression'
				line_number => $0{line_number}
				identifier => $1
				left_expression => $_
				right_expression => !action_expression
			}
		}
		'>' => {
			$_ = {
				type => 'greather_than_expression'
				line_number => $0{line_number}
				identifier => $1
				left_expression => $_
				right_expression => !action_expression
			}
		}
		'<=' => {
			$_ = {
				type => 'less_than_or_equal_expression'
				line_number => $0{line_number}
				identifier => $1
				left_expression => $_
				right_expression => !action_expression
			}
		}
		'>=' => {
			$_ = {
				type => 'greather_than_or_equal_expression'
				line_number => $0{line_number}
				identifier => $1
				left_expression => $_
				right_expression => !action_expression
			}
		}
		'==' => {
			$_ = {
				type => 'equals_expression'
				line_number => $0{line_number}
				identifier => $1
				left_expression => $_
				right_expression => !action_expression
			}
		}
		'!=' => {
			$_ = {
				type => 'not_equals_expression'
				line_number => $0{line_number}
				identifier => $1
				left_expression => $_
				right_expression => !action_expression
			}
		}
		default {
			return
		}
	}
}


object context file_directory_block {
	switch {
		'suffix_timestamp' => {
			match ';'

			$_{properties}{$0} = '1'
		}
		default {
			return
		}
	}
}




item context format_string {
	$_ = $escape_string_substitution->
			$format_string_substitution->$_
	return
}
item context format_native_code {
	$_ = $format_native_code_substitution->$_
	return
}




sub main {{
	use Data::Dumper;
	use Sugar::IO::File;

	my $parser = __PACKAGE__->new;
	foreach my $file (@_) {
		$parser->{filepath} = Sugar::IO::File->new($file);
		my $tree = $parser->parse;
		say Dumper $tree;
	}
}}

