package PaleWhite::Local::Parser

symbol_regex = /\{|\}|\[|\]|\(|\)|;|:|=>|->|<|>|<=|>=|==|=|,|\.|\*|\?|!|\-|\+/
# model_identifier_regex = /model::[a-zA-Z_][a-zA-Z0-9_]*+(?:::[a-zA-Z_][a-zA-Z0-9_]*+)*/
# file_identifier_regex = /file::[a-zA-Z_][a-zA-Z0-9_]*+(?:::[a-zA-Z_][a-zA-Z0-9_]*+)*/
# class_identifier_regex = /[a-zA-Z_][a-zA-Z0-9_]*+(?:::[a-zA-Z_][a-zA-Z0-9_]*+)*/
identifier_regex = /[a-zA-Z_][a-zA-Z0-9_]*+/

integer_regex = /-?\d++/
string_regex = /"([^\\"]|\\[\\"])*?"/s

comment_regex = /#[^\n]*+\n/s
whitespace_regex = /\s++/s




escape_string_substitution = s/\\([\\"])/$1/gs
format_string_substitution = s/\A"(.*)"\Z/$1/s
# format_model_identifier_substitution = s/\Amodel:://s
# format_file_identifier_substitution = s/\Afile:://s


tokens {
	symbol => $symbol_regex
	# model_identifier => $model_identifier_regex
	# file_identifier => $file_identifier_regex
	# class_identifier => $class_identifier_regex
	identifier => $identifier_regex
	
	integer => $integer_regex
	string => $string_regex

	comment => $comment_regex
	whitespace => $whitespace_regex
}

ignored_tokens {
	whitespace
	comment
}




item context format_string {
	$_ = $escape_string_substitution->
			$format_string_substitution->$_
	return
}



list context root {
	switch {
		'localization', $identifier_regex, ':', $identifier_regex, '{' => {
			push !localization_block->{
				type => 'localization_definition'
				line_number => $0{line_number}
				identifier => $1
				localization_identifier => $3
			}
			match '}'
		}
		default {
			die 'block statement expected'
		}
	}
}


object context localization_block {
	switch {
		$identifier_regex, '=', $string_regex => {
			$_{fields}[] = {
				type => 'string_field'
				line_number => $0{line_number}
				identifier => $0
				value => !format_string->$2
			}
		}
		default {
			return
		}
	}
}



sub main {{
	use Data::Dumper;
	use Sugar::IO::File;

	my $parser = __PACKAGE__->new;
	foreach my $file (@_) {
		$parser->{filepath} = Sugar::IO::File->new($file);
		my $tree = $parser->parse;
		say Dumper $tree;
	}
}}


