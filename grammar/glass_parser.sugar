package PaleWhite::GlassParser


identifier_regex = /[a-zA-Z_][a-zA-Z0-9_]*+/
string_interpolation_start_regex = /"([^\\"]|\\[\\"])*?\{\{/s
string_interpolation_middle_regex = /\}\}([^\\"]|\\[\\"])*?\{\{/s
string_interpolation_end_regex = /\}\}([^\\"]|\\[\\"])*?"/s
string_regex = /"([^\\"]|\\[\\"])*?"/s

symbol_regex = /!|\.|\#|=>|=|,|\{|\}|-/

indent_regex = /\t++/
whitespace_regex = /[\t \r]++/
newline_regex = /\s*\n/s

escape_string_substitution = s/\\([\\"])/$1/gs
format_string_substitution = s/\A"(.*)"\Z/$1/s
format_string_interpolation_start_substitution = s/\A"(.*)\{\{\Z/$1/s
format_string_interpolation_middle_substitution = s/\A\}\}(.*)\{\{\Z/$1/s
format_string_interpolation_end_substitution = s/\A\}\}(.*)"\Z/$1/s



tokens {
	identifier => $identifier_regex
	string_interpolation_start => $string_interpolation_start_regex
	string_interpolation_middle => $string_interpolation_middle_regex
	string_interpolation_end => $string_interpolation_end_regex
	string => $string_regex

	symbol => $symbol_regex

	indent => $indent_regex
	whitespace => $whitespace_regex
	newline => $newline_regex
}

ignored_tokens {
	whitespace
}



object context root {
	$_ = !root_glass_block->{
		type => 'root'
		block => []
		indent => ''
	}
	return
}


object context root_glass_block {
	while $newline_regex => {
		# skip newline
	}

	if &match_indent->$_ => {
		$_{block}[] = !glass_block->!glass_item->$0
	} else {
		$_{block}[] = !glass_block->!glass_item->''
	}
}


object context glass_block {
	while $newline_regex => {
		# skip newline
	}
	switch {
		&match_indent->$_ => {
			$_{block}[] = !glass_item->$0
		}
		default {
			return
		}
	}
}

object context glass_item {
	# we cheat by passing in the indent as the argument
	switch {
		'!', 'foreach' => {
			$_ = {
				type => 'glass_helper'
				line_number => $0{line_number}
				identifier => $1
				expression => !glass_argument_expression
				indent => $_
			}
			if 'as', $identifier_regex, '=>', $identifier_regex => {
				$_{key_identifier} = $3
				$_{value_identifier} = $5
			} elsif 'as', $identifier_regex => {
				$_{value_identifier} = $3
			} else {
				$_{value_identifier} = '_'
			}
			match $newline_regex
			$_ = !glass_block->$_
			return
		}
		'!', $identifier_regex => {
			$_ = !glass_helper->{
				type => 'glass_helper'
				line_number => $0{line_number}
				identifier => $1
				indent => $_
			}
			match $newline_regex
			$_ = !glass_block->$_
			return
		}
		$identifier_regex => {
			$_ = !glass_tag_text->!parse_attribute_arguments->!glass_tag->{
				type => 'html_tag'
				line_number => $0{line_number}
				identifier => $0
				indent => $_
			}
			match $newline_regex
			$_ = !glass_block->$_
			return
		}
		$string_interpolation_start_regex => {
			$_ = {
				type => 'expression_node'
				line_number => $0{line_number}
				expression => !glass_interpolation_expression->$0
			}
			match $newline_regex
			return
		}
		$string_regex => {
			$_ = {
				type => 'expression_node'
				line_number => $0{line_number}
				expression => {
					type => 'string_expression'
					string => !format_string->$0
				}
			}
			match $newline_regex
			return
		}
		'{' => {
			$_ = {
				type => 'expression_node'
				line_number => $0{line_number}
				expression => !glass_argument_expression
			}
			match '}'
			match $newline_regex
			return
		}
		default {
			die 'glass item expected'
		}
	}
}


object context glass_tag {
	switch {
		'.', $identifier_regex => {
			$_{class}[] = &extended_html_class->$1
		}
		'#', $identifier_regex => {
			$_{id} = $1
		}
		default {
			return
		}
	}
}

object context parse_attribute_arguments {
	if $identifier_regex => {
		match '='
		$_{attributes}{$0} = !glass_tag_attribute

		while ',' => {
			match $identifier_regex, '='
			$_{attributes}{$3} = !glass_tag_attribute
		}
	}
	return
}

object context glass_tag_attribute {
	switch {
		$string_regex => {
			$_ = {
				type => 'string_expression'
				string => !format_string->$0
			}
			return
		}
		$string_interpolation_start_regex => {
			$_ = !glass_interpolation_expression->$0
			return
		}
		'{' => {
			$_ = !glass_argument_expression
			match '}'
			return
		}
		default {
			die 'attribute expression expected'
		}
	}
}

object context glass_interpolation_expression {
	$_ = {
		type => 'interpolation_expression'
		start_text => $_
	}
	$_{expressions}[] = {
		type => 'string_expression'
		string => !format_string_interpolation_start->$_{start_text}
	}

	$_{expressions}[] = !glass_argument_expression

	while $string_interpolation_middle_regex => {
		$_{expressions}[] = {
			type => 'string_expression'
			string => !format_string_interpolation_middle->$0
		}
		$_{expressions}[] = !glass_argument_expression
	}

	match $string_interpolation_end_regex
	$_{expressions}[] = {
		type => 'string_expression'
		string => !format_string_interpolation_end->$0
	}

	return
}

object context glass_tag_text {
	switch {
		$string_regex => {
			$_{text_expression} = {
				type => 'string_expression'
				string => !format_string->$0
			}
			return
		}
		$string_interpolation_start_regex => {
			$_{text_expression} = !glass_interpolation_expression->$0
			return
		}
		'{' => {
			$_{text_expression} = !glass_argument_expression
			match '}'
			return
		}
		default {
			return
		}
	}
}

object context glass_argument_expression {
	switch {
		$string_regex => {
			$_ = {
				type => 'string_expression'
				string => !format_string->$0
			}
			return
		}
		$identifier_regex => {
			$_ = !glass_more_expression->{
				type => 'variable_expression'
				identifier => $0
			}
			return
		}
		default {
			die 'expression expected'
		}
	}
}

object context glass_more_expression {
	switch {
		'.' => {
			match $identifier_regex
			$_ = {
				type => 'access_expression'
				identifier => $1
				expression => $_
			}
		}
		default {
			return
		}
	}
}




object context glass_helper {
	while $identifier_regex => {
		$_{arguments}[] = $0
	}
	# $_ = !parse_attribute_arguments->$_

	return
}


item context format_string {
	$_ = $escape_string_substitution->
			$format_string_substitution->$_
	return
}

item context format_string_interpolation_start {
	$_ = $escape_string_substitution->
			$format_string_interpolation_start_substitution->$_
	return
}

item context format_string_interpolation_middle {
	$_ = $escape_string_substitution->
			$format_string_interpolation_middle_substitution->$_
	return
}

item context format_string_interpolation_end {
	$_ = $escape_string_substitution->
			$format_string_interpolation_end_substitution->$_
	return
}






sub match_indent {{
	my ($self, $offset, $item) = @_;
	return ($self->{tokens}[$offset][1] =~ /\A\t++\Z/
		and length $self->{tokens}[$offset][1] > length $item->{indent})
}}


# cheap hack to parse the complete tag class
sub extended_html_class {{
	my ($self, $class) = @_;
	while ($self->more_tokens(1)
			and $self->{tokens}[$self->{tokens_index}][1] eq '-'
			and $self->{tokens}[$self->{tokens_index} + 1][1] =~ $var_identifier_regex) {
		my @tokens = $self->step_tokens(2);
		$class .= "-$tokens[1][1]";
	}
	return $class
}}

sub main {{
	use Data::Dumper;
	use Sugar::IO::File;

	my $parser = __PACKAGE__->new;
	foreach my $file (@_) {
		$parser->{filepath} = Sugar::IO::File->new($file);
		my $tree = $parser->parse;
		say Dumper $tree;
	}
}}


