package PaleWhite::ControllerParser

native_code_block_regex = /\{\{.*?\}\}/s

symbol_regex = /\{|\}|\[|\]|\(|\)|;|:|=|,|\.|\?/
# keyword_regex = /\b(model|int|string|getter|setter|cast|to|from|static|function)\b/
identifier_regex = /[a-zA-Z_][a-zA-Z0-9_]*+/
integer_regex = /-?\d++/

string_regex = /"([^\\"]|\\[\\"])*?"/s
comment_regex = /\/\/[^\n]*+\n/s
whitespace_regex = /\s++/s

format_native_code_substitution = s/\A\{\{\s*\n(.*?)\s*\}\}\Z/$1/s
escape_string_substitution = s/\\([\\"])/$1/gs
format_string_substitution = s/\A"(.*)"\Z/$1/s




tokens {
	native_code_block => $native_code_block_regex

	symbol => $symbol_regex
	# keyword => $keyword_regex
	identifier => $identifier_regex
	integer => $integer_regex
	string => $string_regex

	comment => $comment_regex
	whitespace => $whitespace_regex
}

ignored_tokens {
	whitespace
	comment
}




list context root {
	switch {
		'controller' => {
			match $identifier_regex, '{'
			push !controller_block->{
				type => 'controller_definition'
				line_number => $0{line_number}
				identifier => $1
			}
			match '}'
		}
		default {
			die 'block statement expected'
		}
	}
}

object context controller_block {
	switch {
		'path', 'global' => {
			$_{global_paths}[] = !path_action_block->{
				type => 'global_path'
				line_number => $0{line_number}
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'path', 'default' => {
			$_{default_path} = !path_action_block->{
				type => 'default_path'
				line_number => $0{line_number}
				arguments => []
				block => []
			}
		}
		'path', 'error' => {
			$_{error_path} = !path_action_block->{
				type => 'error_path'
				line_number => $0{line_number}
				arguments => []
				block => []
			}
		}
		'path', $string_regex => {
			$_{paths}[] = !path_action_block->{
				type => 'match_path'
				line_number => $0{line_number}
				path => !format_string->$1
				arguments => !optional_arguments_list->[]
				block => []
			}
		}
		'action' => {
			match $identifier_regex

			$_{actions}[] = {
				type => 'action'
				line_number => $0{line_number}
				identifier => $1
				arguments => !optional_arguments_list->[]
				code => !native_code_block->$2
			}
		}
		'validator' => {
			match $identifier_regex

			$_{validators}[] = {
				type => 'validator'
				line_number => $0{line_number}
				identifier => $1
				code => !native_code_block->$2
			}
		}
		default {
			return
		}
	}
}


item context native_code_block {
	match $native_code_block_regex
	$_ = !format_native_code->$0
	return
}


list context optional_arguments_list {
	if '[' => {
		$_ = !arguments_list->$_
	}
	return
}

list context arguments_list {
	if ']' => {
		return
	} else {
		$_ = !arguments_list_item->$_
		while ',' => {
			$_ = !arguments_list_item->$_
		}
		match ']'
		return
	}
}

list context arguments_list_item {
	match $identifier_regex

	if '[', $integer_regex, ']', $identifier_regex => {
		push {
			type => 'argument_specifier'
			line_number => $0{line_number}
			identifier => $4
		}
		push {
			type => 'validate_variable'
			line_number => $0{line_number}
			validator_identifier => $0
			validator_min_size => $2
			validator_max_size => $2
			identifier => $4
		}
		
	} elsif '[', $integer_regex, ':', ']', $identifier_regex => {
		push {
			type => 'argument_specifier'
			line_number => $0{line_number}
			identifier => $5
		}
		push {
			type => 'validate_variable'
			line_number => $0{line_number}
			validator_identifier => $0
			validator_min_size => $2
			identifier => $5
		}
		
	} elsif '[', ':', $integer_regex, ']', $identifier_regex => {
		push {
			type => 'argument_specifier'
			line_number => $0{line_number}
			identifier => $5
		}
		push {
			type => 'validate_variable'
			line_number => $0{line_number}
			validator_identifier => $0
			validator_max_size => $3
			identifier => $5
		}
		
	} elsif '[', $integer_regex, ':', $integer_regex, ']', $identifier_regex => {
		push {
			type => 'argument_specifier'
			line_number => $0{line_number}
			identifier => $6
		}
		push {
			type => 'validate_variable'
			line_number => $0{line_number}
			validator_identifier => $0
			validator_min_size => $2
			validator_max_size => $4
			identifier => $6
		}
		
	} elsif $identifier_regex => {
		push {
			type => 'argument_specifier'
			line_number => $0{line_number}
			identifier => $1
		}
		push {
			type => 'validate_variable'
			line_number => $0{line_number}
			validator_identifier => $0
			identifier => $1
		}
		
	} else {
		push {
			type => 'argument_specifier'
			line_number => $0{line_number}
			identifier => $0
		}
	}

	return
}

object context path_action_block {
	match '{'
	$_ = !path_action_block_list->$_
	match '}'
	return
}

object context path_action_block_list {
	switch {
		'render' => {
			match $identifier_regex
			$_{block}[] = {
				type => 'render_template'
				line_number => $0{line_number}
				identifier => $1
				arguments => !action_arguments->{}
			}
			match ';'
		}
		'status' => {
			$_{block}[] = {
				type => 'assign_status'
				line_number => $0{line_number}
				expression => !action_expression
			}
			match ';'
		}
		'redirect' => {
			$_{block}[] = {
				type => 'assign_redirect'
				line_number => $0{line_number}
				expression => !action_expression
			}
			match ';'
		}
		'action' => {
			match $identifier_regex
			$_{block}[] = {
				type => 'controller_action'
				line_number => $0{line_number}
				identifier => $1
				arguments => !action_arguments->{}
			}
			match ';'
		}
		'route' => {
			match $identifier_regex
			$_{block}[] = {
				type => 'route_controller'
				line_number => $0{line_number}
				identifier => $1
				arguments => !action_arguments->{}
			}
			match ';'
		}
		'validate' => {
			match $identifier_regex, 'as', $identifier_regex
			if '[', $integer_regex, ']' => {
				$_{block}[] = {
					type => 'validate_variable'
					line_number => $0{line_number}
					identifier => $1
					validator_identifier => $3
					validator_min_size => $5
					validator_max_size => $5
				}
			} elsif '[', $integer_regex, ':', ']' => {
				$_{block}[] = {
					type => 'validate_variable'
					line_number => $0{line_number}
					identifier => $1
					validator_identifier => $3
					validator_min_size => $5
				}
			} elsif '[', ':', $integer_regex, ']' => {
				$_{block}[] = {
					type => 'validate_variable'
					line_number => $0{line_number}
					identifier => $1
					validator_identifier => $3
					validator_max_size => $6
				}
			} elsif '[', $integer_regex, ':', $integer_regex, ']' => {
				$_{block}[] = {
					type => 'validate_variable'
					line_number => $0{line_number}
					identifier => $1
					validator_identifier => $3
					validator_min_size => $5
					validator_max_size => $7
				}
			} else {
				$_{block}[] = {
					type => 'validate_variable'
					line_number => $0{line_number}
					identifier => $1
					validator_identifier => $3
				}
			}
			match ';'
		}
		'if' => {
			$_{block}[] = !path_action_block->{
				type => 'if_statement'
				line_number => $0{line_number}
				expression => !branch_action_expression
				block => []
			}
			if 'else' => {
				$_{block}[] = !path_action_block->{
					type => 'else_statement'
					line_number => $0{line_number}
					block => []
				}
			}
		}
		'session', '.', $identifier_regex, '=' => {
			$_{block}[] = {
				type => 'assign_session_variable'
				line_number => $0{line_number}
				identifier => $2
				expression => !action_expression
			}
			match ';'
		}
		$identifier_regex, '=' => {
			$_{block}[] = {
				type => 'assign_variable'
				line_number => $0{line_number}
				identifier => $0
				expression => !action_expression
			}
			match ';'
		}
		default {
			return
		}
	}
}


object context action_arguments {
	if $identifier_regex, '=' => {
		$_{$0} = !action_expression

		while ',', $identifier_regex, '=' => {
			$_{$3} = !action_expression
		}
	}
	return
}


item context branch_action_expression {
	match '('
	$_ = !action_expression
	match ')'
	return
}



object context action_expression {
	switch {
		'model', '?', $identifier_regex => {
			$_ = {
				type => 'load_optional_model_expression'
				line_number => $0{line_number}
				identifier => $2
				arguments => !action_arguments->{}
			}
			return
		}
		'model', $identifier_regex => {
			$_ = {
				type => 'load_model_expression'
				line_number => $0{line_number}
				identifier => $1
				arguments => !action_arguments->{}
			}
			return
		}
		'list', $identifier_regex => {
			$_ = {
				type => 'load_model_list_expression'
				line_number => $0{line_number}
				identifier => $1
				arguments => !action_arguments->{}
			}
			return
		}
		'render', $identifier_regex => {
			$_ = {
				type => 'render_template_expression'
				line_number => $0{line_number}
				identifier => $1
				arguments => !action_arguments->{}
			}
			return
		}
		'action', $identifier_regex => {
			$_ = {
				type => 'controller_action_expression'
				line_number => $0{line_number}
				identifier => $1
				arguments => !action_arguments->{}
			}
			return
		}
		'session', '.', $identifier_regex => {
			$_ = {
				type => 'session_variable_expression'
				line_number => $0{line_number}
				identifier => $2
			}
			return
		}
		$identifier_regex => {
			$_ = !more_action_expression->{
				type => 'variable_expression'
				line_number => $0{line_number}
				identifier => $0
			}
			return
		}
		$string_regex => {
			$_ = {
				type => 'string_expression'
				line_number => $0{line_number}
				value => !format_string->$0
			}
			return
		}
		$integer_regex => {
			$_ = {
				type => 'integer_expression'
				line_number => $0{line_number}
				value => $0
			}
			return
		}
		default {
			die 'expression expected'
		}
	}
}


object context more_action_expression {
	switch {
		'.', $identifier_regex => {
			$_ = {
				type => 'access_expression'
				line_number => $0{line_number}
				identifier => $1
				expression => $_
			}
		}
		default {
			return
		}
	}
}



item context format_string {
	$_ = $escape_string_substitution->
			$format_string_substitution->$_
	return
}
item context format_native_code {
	$_ = $format_native_code_substitution->$_
	return
}


sub main {{
	use Data::Dumper;
	use Sugar::IO::File;

	my $parser = __PACKAGE__->new;
	foreach my $file (@_) {
		$parser->{filepath} = Sugar::IO::File->new($file);
		my $tree = $parser->parse;
		say Dumper $tree;
	}
}}

